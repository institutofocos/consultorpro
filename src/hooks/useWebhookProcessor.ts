
import { useCallback, useState, useEffect } from 'react';
import { toast } from 'sonner';

// Hook para processar webhooks - TOTALMENTE INDEPENDENTE DO SISTEMA DE CHAT
export const useWebhookProcessor = () => {
  const [config, setConfig] = useState({
    consolidationEnabled: false,
    statusChangeEnabled: false
  });

  const processForProjectCreation = useCallback(() => {
    try {
      console.log('üîÑ Processamento de webhook para cria√ß√£o de projeto (SEM CHAT)');
      
      // Log simples para indicar que o processamento foi iniciado
      // NENHUMA REFER√äNCIA A CHAT ROOMS
      toast.success('Projeto criado com sucesso!');
      
    } catch (error) {
      console.error('Erro no processamento de webhook:', error);
      // N√£o exibir erro ao usu√°rio pois √© processo interno
    }
  }, []);

  const processForced = useCallback(async () => {
    try {
      console.log('üöÄ Processamento for√ßado de webhooks (INDEPENDENTE)');
      // Simula√ß√£o de processamento - SEM CHAT
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast.success('Fila de webhooks processada');
    } catch (error) {
      console.error('Erro no processamento for√ßado:', error);
      toast.error('Erro ao processar fila de webhooks');
    }
  }, []);

  const checkConsolidationStatus = useCallback(async () => {
    try {
      // Simula√ß√£o de verifica√ß√£o de status - INDEPENDENTE DO CHAT
      const consolidationEnabled = true;
      const statusChangeEnabled = true;
      
      setConfig({
        consolidationEnabled,
        statusChangeEnabled
      });
      
      return { consolidationEnabled, statusChangeEnabled };
    } catch (error) {
      console.error('Erro ao verificar status:', error);
      return { consolidationEnabled: false, statusChangeEnabled: false };
    }
  }, []);

  useEffect(() => {
    // Inicializar configura√ß√£o - SEM CHAT
    checkConsolidationStatus();
  }, [checkConsolidationStatus]);

  return {
    processForProjectCreation,
    processForced,
    checkConsolidationStatus,
    config
  };
};
